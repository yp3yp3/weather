name: Python application

on:
  push:
    branches: [ "dev" ]

env:
  IMAGE_NAME: yp3yp3/weather
  CD_REPO: yp3yp3/weather-CD 
  USER_NAME: yp3yp3
  EMAIL: yp3yp3@gmail.com
jobs:
  
  build-and-deploy-stage:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Modify the deployment in the CD repo
        with:
          repository: ${{ env.CD_REPO }}
          token: ${{ secrets.GIT_PASSWORD }}
      
      - name: Read current version from values-stage.yaml
        id: get_version
        run: |
          VERSION=$(grep 'tag:' values-stage.yaml | awk '{print $2}')
          NEW_VERSION=$((VERSION + 1))
          echo "IMAGE_VERSION=$NEW_VERSION" >> $GITHUB_ENV          
          
      - name: Check out repository code
        uses: actions/checkout@v4
        
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"


      - name: Run Unit Tests
        run: |
          pip install --upgrade pip
          pip install -r tests/unit/requirements.txt
          PYTHONPATH=gunicorn python -m unittest discover tests/unit
        

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          tags: ${{ env.IMAGE_NAME }}:latest, ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          annotations: ${{ steps.meta.outputs.annotations }}
          load: true 

      - name: Start Container for Integration Testing
        run: |
          docker run -d -p 8081:8081 --name weather_app ${{ env.IMAGE_NAME }}:latest
          sleep 5  # Wait for the app to start
          
      - name: Install  ChromeDriver & requirements
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt update
          sudo apt install -y google-chrome-stable
          wget -O /tmp/chromedriver.zip https://chromedriver.storage.googleapis.com/${CHROME_VERSION}.0/chromedriver_linux64.zip
          sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          pip install -r tests/integration/requirements.txt

      - name: Run Integration Tests
        run: |
          python3 tests/integration/selenium_t.py --headless

      - name: Stop and Remove Container
        if: always()
        run: |
          docker stop weather_app && docker rm weather_app

      - name: Push Docker Image (Only if Tests Pass)
        if: success()
        run: |
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          
      - name: save commit message for CD repo
        run: |
          commitMessage=$(git log -1 --pretty=format:%s)
          commitHash=$(git rev-parse --short HEAD)
          echo COMMIT=${{ env.IMAGE_VERSION }}-${{ github.ref }}-${commitMessage}-${commitHash} >> $GITHUB_ENV
      - uses: actions/checkout@v3
        name: Modify the deployment in the CD repo
        with:
          repository: ${{ env.CD_REPO }}
          token: ${{ secrets.GIT_PASSWORD }}
      - name: Update the test environment with new image
        run: |
          git config --global user.name "${{ env.USER_NAME }}"
          git config --global user.email "${{ env.EMAIL }}"
          sed -i "s|tag:.*\$|tag: ${{ env.IMAGE_VERSION }}|g" values-stage.yaml
          git add -A
          git commit -m "Update Test environment to image version ${{ env.IMAGE_VERSION }}"
          git push

  create-merge-request:
    if: github.event_name == 'push'
    needs: build-and-deploy-stage
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        
      - name: Create pull request
        run: |
          gh pr create -B main -H dev --title "Merge dev to main" --body "Merging tested version from dev to main. Image version: ${{ env.IMAGE_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

